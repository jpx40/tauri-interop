use serde::{de::DeserializeOwned, Deserialize, Serialize};
#[cfg(not(target_family = "wasm"))]
use tauri::{AppHandle, Error, Wry};

#[cfg(not(target_family = "wasm"))]
pub use emit::*;
#[cfg(any(target_family = "wasm", doc))]
pub use listen::*;

/// traits for event emitting in the host code (feat: `tauri`)
#[cfg(not(target_family = "wasm"))]
mod emit;

/// related generic struct and functions for autogenerated listen functions (target: `wasm` or feat: `wasm`)
#[cfg(any(target_family = "wasm", doc))]
mod listen;

/// The trait which needs to be implemented for a [Field]
///
/// Conditionally changes between [Listen] and [Emit]
///
/// When compiled to "target_family = wasm" then following is true.
/// ```ignore
/// trait Parent = listen::Listen;
/// ```
#[cfg(not(target_family = "wasm"))]
pub trait Parent = Emit;

/// The trait which needs to be implemented for a [Field]
///
/// Conditionally changes between [Listen] and [Emit]
#[cfg(target_family = "wasm")]
pub trait Parent = Listen;

/// Trait defining a [Field] to a related struct implementing [Parent] with the related [Field::Type]
pub trait Field<P>
where
    P: Parent,
    <Self as Field<P>>::Type: Default + Clone + Serialize + DeserializeOwned,
{
    /// The type of the field
    type Type;

    /// The event of the field
    const EVENT_NAME: &'static str;

    /// Tries to retrieve the current value from the backend
    ///
    /// only in wasm available
    #[allow(async_fn_in_trait)]
    #[cfg(any(all(target_family = "wasm", feature = "initial_value"), doc))]
    async fn get_value() -> Result<Self::Type, EventError>;

    /// Gets the value from the given parent
    ///
    /// not in wasm available
    #[cfg(not(target_family = "wasm"))]
    fn get_value(parent: &P) -> Self::Type;

    #[cfg(not(target_family = "wasm"))]
    /// Emits event of the related field with their value
    ///
    /// not in wasm available
    fn emit(parent: &P, handle: &AppHandle<Wry>) -> Result<(), Error>;

    #[cfg(not(target_family = "wasm"))]
    /// Updates the related field and emit its event
    ///
    /// not in wasm available
    fn update(s: &mut P, handle: &AppHandle<Wry>, v: Self::Type) -> Result<(), Error>;
}

/// General errors that can happen during event exchange
#[derive(Debug, Serialize, Deserialize, thiserror::Error)]
pub enum EventError {
    /// The given name (struct) is not as tauri::State registered
    #[error("{0} is not as tauri state registered")]
    StateIsNotRegistered(String),
}
